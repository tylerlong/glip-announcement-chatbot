service: glip-announcement-chatbot
provider:
  stage: prod
  name: aws
  runtime: nodejs10.x
  region: us-east-1
  memorySize: 256
  timeout: 300
  environment: ${file(./.env.yml)}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
  vpc:
    subnetIds:
      - Ref: PrivateSubnet1
      - Ref: PrivateSubnet2
      - Ref: PrivateSubnet3
      - Ref: PrivateSubnet4
package:
  exclude:
    - ./**
    - '!lambda.js'
    - '!app.js'
    - '!crontab.js'
    - '!node_modules/**'
  excludeDevDependencies: true
functions:
  app:
    handler: lambda.app
    events:
      - http: 'ANY {proxy+}'
    vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
  # proxy:
  #   handler: lambda.proxy
  #   events:
  #     - http: 'ANY {proxy+}'
  #   vpc:
  #     securityGroupIds:
  #       - Ref: LambdaSecurityGroup
  maintain:
    handler: lambda.maintain
    events:
      - schedule: rate(1 day)
    vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup
  sendEmail:
    handler: lambda.sendEmail
    events:
      - schedule: rate(1 minute)
    vpc:
      securityGroupIds:
        - Ref: LambdaSecurityGroup

resources:
  Resources:
    Vpc:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16

    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: us-east-1a
        CidrBlock: 10.0.10.0/24
        VpcId:
          Ref: Vpc
    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: us-east-1b
        CidrBlock: 10.0.11.0/24
        VpcId:
          Ref: Vpc
    PrivateSubnet3:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: us-east-1c
        CidrBlock: 10.0.12.0/24
        VpcId:
          Ref: Vpc
    PrivateSubnet4:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: us-east-1d
        CidrBlock: 10.0.13.0/24
        VpcId:
          Ref: Vpc

    DbSubnetGroup:
      Type: "AWS::RDS::DBSubnetGroup"
      Properties:
        DBSubnetGroupName: ${self:service}-${self:provider.stage}
        DBSubnetGroupDescription: Private database subnet group
        SubnetIds:
          - Ref: PrivateSubnet1
          - Ref: PrivateSubnet2
          - Ref: PrivateSubnet3
          - Ref: PrivateSubnet4

    LambdaSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupName: ${self:service}-${self:provider.stage}-lambda
        GroupDescription: Allow all outbound traffic, no inbound
        SecurityGroupIngress:
          - IpProtocol: -1
            CidrIp: 127.0.0.1/32
        VpcId:
          Ref: Vpc

    DbSecurityGroup:
      Type: "AWS::EC2::SecurityGroup"
      Properties:
        GroupName: ${self:service}-${self:provider.stage}-db
        GroupDescription: Allow local inbound to port 5432, no outbound
        SecurityGroupIngress:
          - CidrIp: 10.0.0.0/16
            IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 127.0.0.1/32
        VpcId:
          Ref: Vpc

    Database:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: ${self:service}-${self:provider.stage}
        Engine: postgres
        DBName: dbname
        AllocatedStorage: 20
        EngineVersion: 11.2
        DBInstanceClass: db.t3.micro
        MasterUsername: ${self:provider.environment.RINGCENTRAL_CHATBOT_DATABASE_USERNAME}
        MasterUserPassword: ${self:provider.environment.RINGCENTRAL_CHATBOT_DATABASE_PASSWORD}
        DBSubnetGroupName:
          Ref: DbSubnetGroup
        VPCSecurityGroups:
          - Ref: DbSecurityGroup
